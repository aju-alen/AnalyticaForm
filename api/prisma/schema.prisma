// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String?
  receiveMarketingEmails Boolean 
  resetToken String @unique @db.VarChar(255) @default(cuid())  
  emailVerificationToken String
  isGoogleUser Boolean @default(false) 
  emailVerified Boolean @default(false)
  isAdmin   Boolean @default(false)
  isSuperAdmin Boolean @default(false)
  isAProMember Boolean @default(false)
  isGuest Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   surveys   Survey[]
   responsePurchases ResponsePurchase[]

   proMember ProMember?
}

model ProMember {
  id  String   @id @default(cuid())
  subscriptionPeriodStart Int 
  subscriptionAmmount Int
  subscriptionEmail String @unique
  hosted_invoice_url String
  hosted_invoice_pdf String
  subscriptionPeriodEnd   Int 
  invoiceId String @unique
  customerId String
  isSubscribed Boolean


 userId String     @unique
  user   User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Survey {
  id        String   @id @default(cuid())
  surveyTitle     String
  surveyDescription String
  surveyStatus String @default("Draft")
  surveyForms Json  @default("[]")
  selectedItems Json @default("[]")
  surveyViews Int   @default(0)
  surveyCompleted Int   @default(0)
  surveyResponses Int   @default(0)
  surveyIntroduction  String?  @db.LongText
  formQuestions Json @default("[]") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    String      // Field to store the user id

  responses UserSurveyResponse[]
}

model UserSurveyResponse{
  id       String   @id @default(cuid())
  userEmail String @default("Anonymous")
  userName String @default("Anonymous")
  userResponse Json
  ipAddress String @default("")
  userTimeSpent String @default("0")
  formQuestions Json
  introduction Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  survey Survey @relation(fields: [surveyId], references: [id])
  surveyId String
 
}

model ResponsePurchase {
  id                      String   @id @default(cuid())
  sessionIdUrl            String @unique
  userEmail               String
  responseQuantity        Int
  amountPaid              Int
  amountCurrency          String
  paidStatus              Boolean 
  stripePaymentIntentId   String
  stripeRecieptUrl        String
  selectedRegions         String
  selectedIndustries      String
  selectedEducationLevels String
  selectedPositions       String
  selectedExperience      String

  stripeName              String
  stripeCountry           String?
  stripeAddressLineOne    String?
  stripeAddressLineTwo    String?
  stripePostalCode        String?
  stripeState             String?
  stripeCardBrand         String?
  stripeCardLastFourDigit String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}